// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
@import MapKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@protocol AppsoluteCalendarDelegate;
@class NSString;
@class UIColor;
@class NSMutableArray;
@class UIBarButtonItem;
@class UIFont;
@class UIImage;

SWIFT_CLASS("_TtC17AppsoluteCalendar17AppsoluteCalendar")
@interface AppsoluteCalendar : NSObject
@property (nonatomic, strong) id <AppsoluteCalendarDelegate> _Nullable calDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url calName:(NSString * _Nonnull)calName userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password barTintColor:(UIColor * _Nullable)barTintColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url clientSecret:(NSString * _Nonnull)clientSecret cliendID:(NSString * _Nonnull)cliendID calName:(NSString * _Nonnull)calName oauthURL:(NSString * _Nonnull)oauthURL userName:(NSString * _Nonnull)userName password:(NSString * _Nonnull)password barTintColor:(UIColor * _Nullable)barTintColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEventArray:(NSMutableArray * _Nonnull)eventArray barTintColor:(UIColor * _Nullable)barTintColor OBJC_DESIGNATED_INITIALIZER;
/// Makes the Calendar visible
- (void)setCalVisible;
/// Dismisses the Calendar
- (void)returnToRoot;
/// Updates the calendarviews if the style changes
- (void)updateOnStyleChanges;
/// Adds leftBarButtons to the Calendar
/// \param buttons An Array of [UIBarButtonItem]
///
- (void)setNavigationBarButtonsWithButtons:(NSArray<UIBarButtonItem *> * _Nonnull)buttons;
/// Takes the Custom Event Array and mounts it to useable Format
/// \param events NSMutableArray: Events provided by User
///
- (void)mountEventsToAppCalFormat:(NSMutableArray * _Nonnull)events;
- (void)reloadEvents:(NSMutableArray * _Nonnull)events;
/// Switches internal Logs on and off
/// \param level Int: 0 for off and 1 for on
///
- (void)setLogLevel:(NSInteger)level;
/// Sets the refresh interval of the calendar
/// \param seconds Int: number of seconds to pass until the calender refreshes
///
- (void)setCalendarRefreshInterval:(NSInteger)seconds;
/// Disables the calendars refresh interval
- (void)disableCalendarRefreshInterval;
/// Sets the color of the navbar and todaybar in the calendar
/// \param tintColor UIColor: color in which the navbar is displayed
///
- (void)setNavBarTodayBarColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of events in the calendar
/// \param tintColor UIColor: color in which events are displayed
///
- (void)setCalendarEventColor:(UIColor * _Nonnull)tintColor;
/// Sets the tintColor of the calendar
/// \param tintColor UIColor: color in which events are displayed
///
- (void)setCalendarTintColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of the font in the calendar
/// \param tintColor UIColor: color of the calendars font
///
- (void)setCalendarFontColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of the circle which displays the current day
/// \param tintColor UIColor: color in which the current day is circled
///
- (void)setCurrentDayCircleColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of the current days font
/// \param tintColor UIColor: color for the font in the circled day
///
- (void)setCurrentDayFontColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of buttons in the calendars bars
/// \param tintColor UIColor: color in which bar buttons are displayed
///
- (void)setCalendarButtonTintColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of the separators in the monthview
/// \param tintColor UIColor: color in which separators are displayed
///
- (void)setMonthSeparatorTintColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of the separators in the dayview
/// \param tintColor UIColor: color in which separators are displayed
///
- (void)setHourSeparatorColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of the text in the dayviewtable
/// \param tintColor UIColor: color in which the text is displayed
///
- (void)setHourTextColor:(UIColor * _Nonnull)tintColor;
/// Sets the color of the text in the yearviewcells header
/// \param tintColor UIColor: color in which the text is displayed
///
- (void)setMonthNameColor:(UIColor * _Nonnull)tintColor;
/// Sets the font of the text in the yearviewcells header
/// \param font UIFont: font in which the text is displayed
///
- (void)setMonthNameFont:(UIFont * _Nonnull)font;
/// Sets the background image of the year view
/// \param bgimage UIImage: image which is displayed as background
///
- (void)setYearBackgroundImage:(UIImage * _Nonnull)bgimage;
/// Sets the background image of the month view
/// \param bgimage UIImage: image which is displayed as background
///
- (void)setMonthBackgroundImage:(UIImage * _Nonnull)bgimage;
/// Sets the background image of the day view
/// \param bgimage UIImage: image which is displayed as background
///
- (void)setDayBackgroundImage:(UIImage * _Nonnull)bgimage;
/// Sets the background image of the detail view
/// \param bgimage UIImage: image which is displayed as background
///
- (void)setDetailBackgroundImage:(UIImage * _Nonnull)bgimage;
/// Sets the background image for the year, month, day and detail views
/// \param bgimage UIImage: image which is displayed as background
///
- (void)setOverallBackgroundImage:(UIImage * _Nullable)bgimage;
/// Sets the background color for the calendar
/// \param bgColor UIColor: color which is displayed in the background
///
- (void)setOverallBackgroundColor:(UIColor * _Nonnull)bgColor;
/// Sets the content mode of the various background images
/// \param cMode UIViewContentMode: content mode for the background images
///
- (void)setBackgroundImageContentMode:(UIViewContentMode)cMode;
/// Sets the font for event headlines
/// \param newFont UIFont: font for the headline
///
- (void)setEventHeadlineFont:(UIFont * _Nonnull)newFont;
/// Sets the font for everything but the headline in an event
/// \param newFont UIFont: font for the event
///
- (void)setEventTextFont:(UIFont * _Nonnull)newFont;
/// Enables animations for the calendar
/// \param enable Bool: true for enabled, false for disabled
///
- (void)enableCalendarAnimations:(BOOL)enable;
/// Sets the first weekday in the calender
/// <ul>
///   <li>
///     valid values:
///     <ul>
///       <li>
///         (1) Sunday
///       </li>
///       <li>
///         (2)Monday
///       </li>
///       <li>
///         (3)Tuesday
///       </li>
///       <li>
///         (4)Wednesday
///       </li>
///       <li>
///         (5)Thursday
///       </li>
///       <li>
///         (6)Friday
///       </li>
///       <li>
///         (7)Saturday
///       </li>
///     </ul>
///   </li>
/// </ul>
/// \param firstDay Int: value for the day
///
- (void)setFirstDayInWeek:(NSInteger)firstDay;
/// Sets visibility of the “Add”-Button
/// \param visible Bool: true for visible, false for invisible
///
- (void)setAddButtonVisibility:(BOOL)visible;
/// Sets visibility of the “Today”-Button
/// \param visible Bool: true for visible, false for invisible
///
- (void)setTodayButtonVisibility:(BOOL)visible;
/// Sets the scrolling of the “Today”-Button
/// \param animate Bool: true for animated scrolling, false for jumping
///
- (void)todayButtonShoudAnimateScrolling:(BOOL)animate;
/// Sets visibility of the year in the headerview of the months
/// \param visible Bool: true for visible, false for invisible
///
- (void)showYearInMonthHeader:(BOOL)visible;
/// Sets the startview of the calendar to month
/// \param disable Bool: true for invisible, false for visible
///
- (void)disableYearView:(BOOL)disable;
- (void)isSubclassed:(BOOL)subclassed;
/// Enables or disables event notifications
/// \param allow Bool: true for enabled, false for disabled
///
- (void)sendAlertNotifications:(BOOL)allow;
/// Sets the title text and message text for the alertbox if an event is to be deleted
/// \param title String: the text for the alertbox title
///
/// \param message String: the text for the alertbox message
///
- (void)setDeleteAlert:(NSString * _Nonnull)title message:(NSString * _Nonnull)message;
/// Sets the title text and message text for the alertbox if there is no title set when trying to edit the recurrence of an event
/// \param title String: the text for the alertbox title
///
/// \param message String: the text for the alertbox message
///
- (void)setRecurrenceEditAlert:(NSString * _Nonnull)title message:(NSString * _Nonnull)message;
/// Sets the title text and message text for the alertbox if there is no connection to the calendar server
/// \param title String: the text for the alertbox title
///
/// \param message String: the text for the alertbox message
///
- (void)setNoConnectionAlert:(NSString * _Nonnull)title message:(NSString * _Nonnull)message;
/// Sets the title text and message text for the alertbox if the startdate of an event is to be changed by the framework
/// \param title String: the text for the alertbox title
///
/// \param message String: the text for the alertbox message
///
- (void)setDateChangeAlert:(NSString * _Nonnull)title message:(NSString * _Nonnull)message;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC17AppsoluteCalendar39AppsoluteCalendarTemplateViewController")
@interface AppsoluteCalendarTemplateViewController : UIViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIStoryboardSegue;

SWIFT_CLASS("_TtC17AppsoluteCalendar25AppsoluteCalendarAddingVC")
@interface AppsoluteCalendarAddingVC : AppsoluteCalendarTemplateViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)viewWillAppear:(BOOL)animated;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17AppsoluteCalendar29AppsoluteCalendarTemplateView")
@interface AppsoluteCalendarTemplateView : UIView
- (void)layoutSubviews;
- (void)chanceBGColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AppsoluteCalendarDayDelegate;
@class UIScrollView;
@class UITableView;
@class UITableViewCell;
@class UIGestureRecognizer;

SWIFT_CLASS("_TtC17AppsoluteCalendar20AppsoluteCalendarDay")
@interface AppsoluteCalendarDay : AppsoluteCalendarTemplateView <UITableViewDelegate, UIScrollViewDelegate, UITableViewDataSource, UIGestureRecognizerDelegate>
@property (nonatomic, strong) id <AppsoluteCalendarDayDelegate> _Nullable myDelegate;
@property (nonatomic, copy) NSDate * _Null_unspecified receivedDate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame currentDate:(NSDate * _Nonnull)currentDate OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
/// Reloads the displayed days
- (void)reloadDays;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class AppsoluteCalendarDefaultObject;

SWIFT_PROTOCOL("_TtP17AppsoluteCalendar28AppsoluteCalendarDayDelegate_")
@protocol AppsoluteCalendarDayDelegate
/// Handles what happens if an event is tappen in the dayview.
/// \param dayView AppsoluteCalendarDay: The current view
///
/// \param date Date: The date of the event
///
/// \param eventsForDate AppsoluteCalendarDefaultObject: The clicked event
///
- (void)dayViewDidSelectDefaultEvent:(AppsoluteCalendarDay * _Nonnull)dayView date:(NSDate * _Nonnull)date eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
@end

@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC17AppsoluteCalendar22AppsoluteCalendarDayVC")
@interface AppsoluteCalendarDayVC : AppsoluteCalendarTemplateViewController <AppsoluteCalendarDayDelegate>
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)dayViewDidSelectDefaultEvent:(AppsoluteCalendarDay * _Nonnull)dayView date:(NSDate * _Nonnull)date eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSMutableDictionary;

SWIFT_CLASS("_TtC17AppsoluteCalendar30AppsoluteCalendarDefaultObject")
@interface AppsoluteCalendarDefaultObject : NSObject
@property (nonatomic, strong) NSMutableDictionary * _Nullable event;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17AppsoluteCalendar25AppsoluteCalendarDelegate_")
@protocol AppsoluteCalendarDelegate
@optional
/// Tells the delegate that a new event has to be added
/// \param event NSMutableDictionary: The new event
///
- (void)returnNewEvent:(NSMutableDictionary * _Nonnull)event;
/// Tells the delegate that a event has to be deleted
/// \param event NSMutableDictionary: The event to delete
///
- (void)returnEventToBeDeleted:(NSMutableDictionary * _Nonnull)event;
/// Tells the delegate that two events need to be exchanged
/// \param oldEvent NSMutableDictionary: The old event that needs to be deleted
///
/// \param newEvent NSMutableDictionary: The new event that needs to be added instead
///
- (void)changeOldEventToNewEvent:(NSMutableDictionary * _Nonnull)oldEvent newEvent:(NSMutableDictionary * _Nonnull)newEvent;
/// Tells the delegate that the detailView clicked a link. Only available when using the complete Calendar.
/// \param clickedLink String: The clicked URL
///
- (void)detailViewClickedLink:(NSString * _Nonnull)clickedLink;
@end

@protocol AppsoluteCalendarDetailViewDelegate;
@class MKMapView;

SWIFT_CLASS("_TtC17AppsoluteCalendar23AppsoluteCalendarDetail")
@interface AppsoluteCalendarDetail : AppsoluteCalendarTemplateView <UIScrollViewDelegate, UITableViewDelegate, MKMapViewDelegate, UITableViewDataSource>
@property (nonatomic, strong) id <AppsoluteCalendarDetailViewDelegate> _Nullable myDelegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)mapViewWillStartLoadingMap:(MKMapView * _Nonnull)mapView;
- (void)mapViewDidFinishLoadingMap:(MKMapView * _Nonnull)mapView;
- (void)mapViewDidFailLoadingMap:(MKMapView * _Nonnull)mapView withError:(NSError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP17AppsoluteCalendar35AppsoluteCalendarDetailViewDelegate_")
@protocol AppsoluteCalendarDetailViewDelegate
/// Tells the delegate that the view will edit an event.
/// \param detailView AppsoluteCalendarDetail: The view that starts editing
///
/// \param eventsForDate AppsoluteCalendarDefaultObject: The event that will be edited
///
- (void)detailViewWillEditEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
/// Tells the delegate that the view will delete an event or a set of events.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     detailView:       AppsoluteCalendarDetail: The view that starts deleting
///   </li>
///   <li>
///     eventsForDate:    AppsoluteCalendarDefaultObject: The event that will be deleted
///   </li>
/// </ul>
- (void)detailViewWillDeleteEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
/// Tells the delegate that the view will edit a single event.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     detailView:       AppsoluteCalendarDetail: The view that starts deleting
///   </li>
///   <li>
///     eventsForDate:    AppsoluteCalendarDefaultObject: The event that will be deleting
///   </li>
/// </ul>
- (void)detailViewWillDeleteOneEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
/// Tells the delegate that the view will delete all following occurrences of an event.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     detailView:       AppsoluteCalendarDetail: The view that starts deleting
///   </li>
///   <li>
///     eventsForDate:    AppsoluteCalendarDefaultObject: The event that gets its follow ups deleted
///   </li>
/// </ul>
- (void)detailViewWillDeleteFollowingEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
@optional
/// Tells the delegate that the urlcell has been selected.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     detailView:  AppsoluteCalendarDetail: The view that starts deleting
///   </li>
///   <li>
///     url:         String: The url-string
///   </li>
/// </ul>
- (void)detailViewSelectedURL:(AppsoluteCalendarDetail * _Nonnull)detailView url:(NSString * _Nonnull)url;
@end


SWIFT_CLASS("_TtC17AppsoluteCalendar25AppsoluteCalendarDetailVC")
@interface AppsoluteCalendarDetailVC : AppsoluteCalendarTemplateViewController <AppsoluteCalendarDetailViewDelegate>
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)detailViewWillEditEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
- (void)detailViewWillDeleteEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
- (void)detailViewWillDeleteOneEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
- (void)detailViewWillDeleteFollowingEvent:(AppsoluteCalendarDetail * _Nonnull)detailView eventsForDate:(AppsoluteCalendarDefaultObject * _Nonnull)eventsForDate;
- (void)detailViewSelectedURL:(AppsoluteCalendarDetail * _Nonnull)detailView url:(NSString * _Nonnull)url;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@protocol AppsoluteCalendarMonthDelegate;
@protocol AppsoluteCalendarMonthDataSource;
@class AppsoluteCalendarMonthCell;
@class UICollectionView;
@class UICollectionViewCell;
@class UICollectionReusableView;

SWIFT_CLASS("_TtC17AppsoluteCalendar22AppsoluteCalendarMonth")
@interface AppsoluteCalendarMonth : AppsoluteCalendarTemplateView <UIScrollViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout>
@property (nonatomic, strong) id <AppsoluteCalendarMonthDelegate> _Nullable myDelegate;
@property (nonatomic, strong) id <AppsoluteCalendarMonthDataSource> _Nullable myDataSource;
@property (nonatomic, strong) AppsoluteCalendarMonthCell * _Nullable myCell;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// Tells the view that the viewController defined a custom cell.
- (void)vcChangedCell;
- (void)layoutSubviews;
/// Adds the “Today”-Button and its functionality to the Bar on the lower screen.
- (void)setupTodayButton;
- (void)chanceBGColor;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Scrolls to “today”
/// \param animated determines if the scroll is animaten(true) or not(false)
///
- (void)scrollToToday:(BOOL)animated;
/// Scrolls to a certain date
/// <ul>
///   <li>
///     parameters:
///     - date: the date to which the collection view scrolls
///     - animated: determines if the scroll is animaten(true) or not(false)
///   </li>
/// </ul>
- (void)scrollToDateAnimated:(NSDate * _Nonnull)date animated:(BOOL)animated;
/// Reloads the data in the collection view
- (void)reloadData;
@end

@class UILabel;

SWIFT_CLASS("_TtC17AppsoluteCalendar26AppsoluteCalendarMonthCell")
@interface AppsoluteCalendarMonthCell : UICollectionViewCell
@property (nonatomic, strong) IBOutlet UILabel * _Null_unspecified monthLabel;
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified curDayCirc;
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified eventCirc;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)addSeparator;
- (void)layoutSubviews;
/// Reloads a cells marker if something changes.
- (void)reloadMarkerImage;
@end


SWIFT_PROTOCOL("_TtP17AppsoluteCalendar32AppsoluteCalendarMonthDataSource_")
@protocol AppsoluteCalendarMonthDataSource
/// Tells the calendar to mark a certain date.
/// \param calendar AppsoluteCalendarMonth: the active calendar
///
/// \param date Date: the date in question
///
///
/// returns:
/// A value to tell the calendar to mark (true) or not mark (false) the date
- (BOOL)calendarShouldMarkDate:(AppsoluteCalendarMonth * _Nonnull)calendar date:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP17AppsoluteCalendar30AppsoluteCalendarMonthDelegate_")
@protocol AppsoluteCalendarMonthDelegate
@optional
/// Handles what happens if a date in the monthview is clicked.
/// \param calendar AppsoluteCalendarMonth: the current monthview
///
/// \param date Date: the clicked date
///
/// \param eventsForDate NSMutableArray: An array of dates for that day
///
- (void)calendarDidSelectDate:(AppsoluteCalendarMonth * _Nonnull)calendar date:(NSDate * _Nonnull)date eventsForDate:(NSMutableArray * _Nonnull)eventsForDate;
/// Lets the user register custom cells for the monthview.
/// \param collectionView UICollectionView: the current collectionview
///
/// \param identifier NSString: the identifier of the custom cell
///
- (BOOL)registerCustomCellForCalendar:(UICollectionView * _Nonnull)collectionView identifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Defines the cusomt cells for the monthview.
/// \param collectionView UICollectionView: the collectionview that uses the cell
///
/// \param identifier NSString: the cells identifier
///
/// \param cellDate Date: the date of the cell
///
/// \param today Date: todays date
///
/// \param indexPath IndexPath: the cells index path
///
///
/// returns:
/// the cell as AppsoluteCalendarMonthCell
- (AppsoluteCalendarMonthCell * _Nonnull)defineCustomCellForCalendar:(UICollectionView * _Nonnull)collectionView cellDate:(NSDate * _Nonnull)cellDate identifier:(NSString * _Nonnull)identifier indexPath:(NSIndexPath * _Nonnull)indexPath today:(NSDate * _Nonnull)today notInMonth:(BOOL)notInMonth SWIFT_WARN_UNUSED_RESULT;
/// Handles what happens if the user scrolls past a month.
/// \param month Int: the new month
///
- (void)calendarChangedMonthInSight:(NSString * _Nonnull)month;
/// Handles what happens if the user scrolls past a year.
/// \param year Int: the new year
///
- (void)calendarChangedYearInSight:(NSString * _Nonnull)year;
@end


SWIFT_CLASS("_TtC17AppsoluteCalendar24AppsoluteCalendarMonthVC")
@interface AppsoluteCalendarMonthVC : AppsoluteCalendarTemplateViewController <AppsoluteCalendarMonthDelegate, AppsoluteCalendarMonthDataSource>
@property (nonatomic, strong) IBOutlet AppsoluteCalendarMonth * _Null_unspecified monthView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)calendarDidSelectDate:(AppsoluteCalendarMonth * _Nonnull)calendar date:(NSDate * _Nonnull)date eventsForDate:(NSMutableArray * _Nonnull)eventsForDate;
- (AppsoluteCalendarMonthCell * _Nonnull)defineCustomCellForCalendar:(UICollectionView * _Nonnull)collectionView cellDate:(NSDate * _Nonnull)cellDate identifier:(NSString * _Nonnull)identifier indexPath:(NSIndexPath * _Nonnull)indexPath today:(NSDate * _Nonnull)today notInMonth:(BOOL)notInMonth SWIFT_WARN_UNUSED_RESULT;
- (void)calendarChangedMonthInSight:(NSString * _Nonnull)month;
- (void)calendarChangedYearInSight:(NSString * _Nonnull)year;
- (BOOL)calendarShouldMarkDate:(AppsoluteCalendarMonth * _Nonnull)calendar date:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (BOOL)calendarAllTasksCompleteOnDate:(AppsoluteCalendarMonth * _Nonnull)calendar date:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17AppsoluteCalendar37AppsoluteCalendarNavigationController")
@interface AppsoluteCalendarNavigationController : UINavigationController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC17AppsoluteCalendar31AppsoluteCalendarViewController")
@interface AppsoluteCalendarViewController : UISplitViewController
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol AppsoluteCalendarYearViewDelegate;

SWIFT_CLASS("_TtC17AppsoluteCalendar21AppsoluteCalendarYear")
@interface AppsoluteCalendarYear : AppsoluteCalendarTemplateView <UICollectionViewDelegate, UIScrollViewDelegate, UICollectionViewDelegateFlowLayout, UICollectionViewDataSource>
@property (nonatomic, strong) id <AppsoluteCalendarYearViewDelegate> _Nullable myDelegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// Tells the view that the viewController defined a custom cell.
- (void)vcChangedCell;
- (void)layoutSubviews;
/// Adds the “Today”-Button and its functionality to the Bar on the lower screen.
- (void)setupTodayButton;
- (void)chanceBGColor;
/// Reloads the data in the collection view
- (void)reloadData;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)viewForZoomingInScrollViewWithScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
@end


SWIFT_CLASS("_TtC17AppsoluteCalendar25AppsoluteCalendarYearCell")
@interface AppsoluteCalendarYearCell : UICollectionViewCell
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17AppsoluteCalendar33AppsoluteCalendarYearViewDelegate_")
@protocol AppsoluteCalendarYearViewDelegate
/// Handles what happens if a month in the yearview is clicked.
/// \param calendar AppsoluteCalendarYear: the current yearview
///
/// \param month Int: the clicked month
///
/// \param year Int: the clicked year
///
- (void)calendarDidSelectMonth:(AppsoluteCalendarYear * _Nonnull)calendar month:(NSInteger)month year:(NSInteger)year;
@optional
/// Lets the user register custom cells for the yearview.
/// \param collectionView UICollectionView: the current collectionview
///
/// \param identifier NSString: the identifier of the custom cell
///
- (BOOL)registerCustomCellForCalendar:(UICollectionView * _Nonnull)collectionView identifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Defines the custom cells for the yearview.
/// \param collectionView UICollectionView: the collectionview that uses the cell
///
/// \param identifier NSString: the cells identifier
///
/// \param month Int: the cells month
///
/// \param year Int: the cells year
///
/// \param indexPath IndexPath: the cells index path
///
///
/// returns:
/// the cell as AppsoluteCalendarYearCell
- (AppsoluteCalendarYearCell * _Nonnull)defineCustomCellForCalendar:(UICollectionView * _Nonnull)collectionView identifier:(NSString * _Nonnull)identifier month:(NSInteger)month year:(NSInteger)year indexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Handles what happens if the user scrolls past a year.
/// \param year Int: the new year
///
- (void)calendarChangedYearInSight:(NSString * _Nonnull)year;
@end


SWIFT_CLASS("_TtC17AppsoluteCalendar23AppsoluteCalendarYearVC")
@interface AppsoluteCalendarYearVC : AppsoluteCalendarTemplateViewController <AppsoluteCalendarYearViewDelegate>
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)calendarDidSelectMonth:(AppsoluteCalendarYear * _Nonnull)calendar month:(NSInteger)month year:(NSInteger)year;
- (AppsoluteCalendarYearCell * _Nonnull)defineCustomCellForCalendar:(UICollectionView * _Nonnull)collectionView identifier:(NSString * _Nonnull)identifier month:(NSInteger)month year:(NSInteger)year indexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)calendarChangedYearInSight:(NSString * _Nonnull)year;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL("_TtP17AppsoluteCalendar32ImageScaledForTransitionDelegate_")
@protocol ImageScaledForTransitionDelegate
@optional
- (void)startTransition:(UIView * _Nonnull)sender;
@end

#pragma clang diagnostic pop
